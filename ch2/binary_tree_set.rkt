#lang racket
(provide (all-defined-out))

(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right)
  (list entry left right))

(define (element-of-set? x s1)
  (cond ((null? s1) false)
        ((= x (entry s1)) true)
        ((< x (entry s1))
         (element-of-set? x (left-branch s1)))
        (#t (element-of-set? x (right-branch s1)))))

(define (adjoin-set x s1)
  (cond ((null? s1) (make-tree x '() '()))
        ((= x (entry s1)) s1)
        ((< x (entry s1))
         (make-tree (entry s1)
                    (adjoin-set x (left-branch s1))
                    (right-branch s1)))
        (#t (make-tree (entry s1)
                       (left-branch s1)
                       (adjoin-set x (right-branch s1))))))