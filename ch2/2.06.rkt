#lang racket

;; "Zero" means the procedure generated by the given procedure will do
;; nothing about its input parameter, which could be either a number
;; or another procedure
(define zero (lambda (f) (lambda (x) x)))

;; "Add-1" means for the original procedure `(f x)', it would apply
;; input procedure `n' to the `f' **once**, and then apply it to the
;; input parameter `x' (either a number or another procedure) to
;; generate the new input parameter, and use that to feed the
;; procedure `f'. Note that, the counterpart of `add-1' is not `zero',
;; but would be `add-0'.
(define (add-1 n)
  (lambda (f) (lambda (x) (f ((n f) x)))))
