(define (entry tree) (car tree))
(define (left-branch tree) (cadr tree))
(define (right-branch tree) (caddr tree))
(define (make-tree entry left right) (list entry left right))

(define (leaf? tree)
  (and (null? (left-branch tree)) (null? (right-branch tree))))

(define (count-nodes tree)
  (if (leaf? tree) 1
    (+ 1 (count-nodes (left-branch tree)) (count-nodes (right-branch tree)))))

(define (element-of-set? x set)
  (cond ((null? set) false)
	((= x (entry set)) true)
	((< x (entry set)) (element-of-set? x (left-branch set)))
	((> x (entry set)) (element-of-set? x (right-branch set)))))

(define (adjoin-set x set)
  (cond ((null? set) (make-tree x '() '()))
	((= x (entry set)) set)
	((< x (entry set))
	 (make-tree (entry set)
		    (adjoin-set x (left-branch set))
		    (right-branch set)))
	((> x (entry set))
	 (make-tree (entry set)
		    (left-branch set)
		    (adjoin-set x (right-branch set))))))

(define (lookup val set)
  (cond ((equal? val (entry set)) true)
	((leaf? set) ())
	(else (or (lookup val (left-branch set))
		   (lookup val (right-branch set))))))
